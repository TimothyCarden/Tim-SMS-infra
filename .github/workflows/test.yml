name: 'test'

on:
  repository_dispatch:
   types: [custom-event]
  push:
    branches: ["develop","release/*"]

jobs:
  prepare-environment:
    name: 'Setup Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps: 
    - name: Setup Terraform
      uses: autero1/action-terraform@v1.1.0
      with:
        terraform_version: 1.3.0
  deploy_to_dev:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'repository_dispatch' || startsWith(github.ref, 'refs/heads/develop')}} 
    needs: prepare-environment
    environment: develop
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Get subfolders in lambdas folder
        id: subfolders-specific
        run: |
          subfolders=$(find lambdas -mindepth 1 -maxdepth 1 -type d)
          echo "::set-output name=subfolders::${subfolders}"

      - name: Iterate over subfolders and build lambdas
        if: steps.subfolders-specific.outputs.subfolders != ''
        run: |
          subfolders="${{ steps.subfolders-specific.outputs.subfolders }}"
          for lambda in $subfolders
          do 
            dirname $lambda
            real_name=$(echo $lambda | grep -oP '\K(lambdas/[^/]*)')
            echo "Build $real_name"
            cd $real_name
            sh build.sh
            cd -
          done

      # - name: Deploy lambdas to AWS
      #   if: steps.changed-files-specific.outputs.any_changed == 'true'
      #   run: |
      #     changes="${{ steps.changed-files-specific.outputs.all_changed_files }}"
      #     for lambda in `for change in $changes; do dirname $change; done | sort | uniq`
      #       do 
      #       real_name=`echo $lambda | grep -oP '\K(lambdas/[^/]*)'`
      #       echo Build $real_name
      #       cd $real_name
      #       NAME=$(basename `pwd`)
      #       aws lambda update-function-code --function-name ${{ vars.ENV }}-$NAME --zip-file fileb://$NAME-package.zip
      #       cd -
      #     done

  